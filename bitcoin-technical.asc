BTChip : Technical Specification  
=================================
BTChip <contact@btchip.com>
firmware version 1.4.3 - 20.03.14-1

== 1.4.3 (30c3 release hopefully :p - 20.03 Paymium Meetup release)
  - [enh] full redesign : HD Wallet (BIP 32), Keyboard confirmation, server and partial transactions APIs

== 1.4.2 (Bitcoin 2013 release)
  - [enh] New security rules & operation modes

== 1.4.1 (private release)
  - [enh] ECC operations speed-up
  - [bug] Private key are now paired to their curve parameters (cheers Jix :p)

== 1.4.0 (29c3 release)
  - Initial release

== About

BTChip is a USB smartcard/dongle dedicated to secure bitcoin transactions. It performs all sensitive cryptographic operations related to a bitcoin transaction (key generation & signature) onboard, and helps protect against malware in an untrusted environment by controlling the signed data.

== User validation

BTChip allows you to validate what you sign - i.e. check that you are paying the right amount to the right destination.

User validation is performed as follows : 

  - A specific status is returned to inform the user that a validation is pending  
  - The user unplugs the dongle 
  - The user plugs the dongle back into the computer (or a different computer / smartphone, tablet with USB host support, depending on how confident you are about the first computer integrity)
  - The dongle "types" (as a keyboard) a summary of the action to be validated and a 4 digits PIN to be entered, which is unique to the transaction
  - The user plugs the dongle back into the first computer (or just unplugs / plugs it again)
  - The user enters the PIN to confirm user validation

== Operation modes

Operation modes define which operations are allowed given the security environment the dongle is operating in.

Four operation modes are defined :

  - standard-wallet mode, managing an HD Wallet (BIP 32) with multiple accounts, supporting payments to a single address and enforcing user validation of the full transaction. This mode is intended for all bitcoin users.
  - relaxed-wallet mode, managing an HD Wallet with multiple accounts, supporting arbitrary payments and enforcing user validation of the amount spent. This mode is intended for bitcoin users interested in drafting custom transactions with some level of control.
  - server mode, managing an HD Wallet with multiple accounts, supporting arbitrary payments and enforcing pre defined limits on the amount spent. This mode is intended for server operators using one or several BTChip dongles to secure their hot wallets.
  - developer mode, managing BIP 32 or regular private keys and allowing to sign arbitrary data. This mode is intended for bitcoin power users drafting custom transactions and only interested in private keys protection.

The dongle initally operates in standard-wallet mode when received. The last chosen mode is restored when the dongle is powered on.

WARNING: In this version, only standard-wallet mode is supported

=== standard-wallet mode

Only a single point-to-point output (i.e. the standard script or a P2SH script) along with one change address on the external chain is authorized. 

All transaction inputs are controlled by the dongle.

The change address index is automatically handled by the dongle and increased for each transaction to prevent address reuse. The change address index is shared for all accounts.

The standard script is coded as 

---------------------------------------------------------------------------------
OP_DUP OP_HASH160 [pubKeyHash] OP_EQUALVERIFY OP_CHECKSIG
---------------------------------------------------------------------------------

A P2SH script is coded as

---------------------------------------------------------------------------------
OP_HASH160 [script hash] OP_EQUAL
---------------------------------------------------------------------------------

Transaction are controlled by the user validation process. The following data will be prompted to the user : 

  - Account index used
  - Amount to pay
  - Change amount
  - Fees

=== relaxed-wallet mode

Arbitrary output is authorized

Transaction inputs are only controlled if they use a key actually belonging to a wallet account.

Transaction are controlled by the user validation process. The following data will be prompted to the user : 

  - Account index used
  - Amount to pay
  - A large warning that relaxed-wallet mode is in use

=== server mode

Arbitrary output is authorized

Transaction inputs are only controlled if they use a key actually belonging to a wallet account.

Transactions are controlled given user parameters and automatically signed if accepted.

Transactions can be controlled on a combination of the following parameters :

  - A cumulative maximum amount used in transactions
  - A maximum number of consecutive transactions before the dongle is removed
  
=== developer mode

Arbitrary data can be signed in this mode

Keys used in developer mode cannot be used in a different mode

== Lifecycle management APDUs

=== SETUP

==== Description

This command is used to setup the dongle when received. It must be executed on a trusted computer as security critical data is exchanged. 

For a new dongle not used as a backup device, a regular user will create a new random seed for a HD wallet and a PIN.

The PIN is used to perform a new payment transaction - it is sent as cleartext to the dongle and is not intended to be used as a malware protection method, only as an anti theft security. 

After SETUP is performed, the dongle has to be reset to wipe out all parameters and start again - this can be achieved by entering the wrong PIN 3 times in a row.

A wipe PIN can be provided for plausible deniability - when entered instead of the regular user PIN, the seed is replaced by a random one and the device keeps operating.

It is recommended to store the BIP32 seed returned in the output of the SETUP command in a safe location for backup purposes - typically GPG encrypt it to yourself and store it on multiple storage devices / clouds.

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   E0  |   20   |  00 |   00 | var | var  
|==============================================================================================================================


'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Bitflag of supported operation modes                                              

    0x01 : wallet mode

    0x02 : relaxed wallet mode

    0x04 : server mode

    0x08 : developer mode

    0x80 : enable RFC 6979 deterministic signatures (otherwise use a random K)
                                                                                    | 1
| Key version accepted for regular addresses                                        | 1
| Key version accepted for Pay To Script Hash Addresses (BIP 16), or 0x00 if disabled | 1
| User PIN length (from 0x04 up to 0x20)                                            | 1 
| User PIN                                                                          | var
| Wipe PIN length (from 0x00 up to 0x04)                                            | 1 
| Wipe PIN                                                                          | var
| Number of keymap encodings (at least 0x01)                                        | 1
| Keymap encodings                                                                  | var
| BIP32 Seed flag (0x00 to generate a new seed, 0x01 to restore a seed backup)      | 1
| User entropy if generating a new seed, BIP32 Seed if restoring a seed backup      | 32
| 3DES-2 key wrapping key length for developer mode (0x00 to generate a new key, 
  0x10 to set up a backup)                                                          | 1
| 3DES-2 key wrapping key for developer mode                                        | null or 16  
|==============================================================================================================================

When enabled, RFC 6979 deterministic signatures will be used for all operations in wallet, relaxed wallet and server modes, and will be optionally available in developer mode. 

NOTE: Using deterministic signatures will make the signing process slower and could possibly create a larger side channel attack surface due to the way private keys are handled during the computation of the random value. We suggest to only enable this mode if you don't trust the chip hardware Random Number Generator.

The following Key version are suggested for regular addresses

[width="80%"]
|==============================================================================================================================
| *Network*                                                                    | *Version (dec)*
| Bitcoin (main network)                                                       | 0
| Bitcoin (test network)                                                       | 111
| Litecoin (main network)                                                      | 48
| Litecoin (test network)                                                      | 111
| Dogecoin (main network)                                                      | 30
| Dogecoin (test network)                                                      | 113
|==============================================================================================================================

The following Key version are suggested for Pay To Script Hash addresses

[width="80%"]
|==============================================================================================================================
| *Network*                                                                    | *Version (dec)*
| Bitcoin (main network)                                                       | 5
| Bitcoin (test network)                                                       | 196
|==============================================================================================================================

If generating a new seed, the dongle generates a 32 bytes random from its hardware Random Number Generator and performs an exclusive OR between this number and the provided user entropy to create the seed.

A keymap encoding is a set of Keyboard HID Usage IDs mapping the keyboard layout of the computer on which the user validation is performed. If several keymap encodings are provided, the user validation will be typed using all provided encodings, separated by a Carriage Return.

Each keymap encoding is coded as follows

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Flags

    0x01 : Numbers are typed with SHIFT key pushed
    0x02 : Decimal mark is typed with SHIFT key pushed
                                                                                    | 1
| Hid mapping codes from '0' to '9'                                                 | 10
| Hid mapping codes from 'A' to 'Z'                                                 | 26
| Hid mapping code for decimal mark                                                 | 1
| Hid mapping code for SPACE                                                        | 1
| Hid mapping code for RETURN                                                       | 1
|==============================================================================================================================

The default QWERTY Keymap Encoding is

   00
   27 1E 1F 20 21 22 23 24 25 26
   04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D
   37
   2C
   28

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Random generated, or 00..00 if restoring an existing seed                         | 32
| BIP32 Seed                                                                        | 32
| Server HOTP limit operation key                                                   | 48
| 3DES-2 trusted input key                                                          | 16
| 3DES-2 key wrapping key for developer mode                                        | 16
|==============================================================================================================================

'Availability'

This function is only available before the dongle is set up (either when received or following a dongle reset)

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|================================================================================================

=== VERIFY PIN

==== Description

This command is used to unlock the dongle using the PIN provided during setup.

The dongle must be physically reset after each invalid PIN to issue a new command.

After 3 invalid PIN submitted in a row, the dongle data is erased and it must be setup again.

If the wipe PIN is entered instead of the user PIN, the device seed is replaced by a random one and the device keeps operating.

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   E0  |   22   |  00 |   00 | var | 00
|==============================================================================================================================

'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| PIN                                                                               | var
|==============================================================================================================================

'Output data'

None

'Availability'

This function is always available following dongle setup.

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|================================================================================================

=== GET OPERATION MODE

==== Description

This command returns the current operation mode used by the dongle


==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   E0  |   24   |  00 |   00 | 00 | 01
|==============================================================================================================================

'Input data'

None

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Operation Mode        
    
      0x01 : standard wallet

      0x02 : relaxed wallet

      0x04 : server 

      0x08 : developer

                                                            | 1
|==============================================================================================================================

'Availability'

This function is always available following dongle setup.

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|================================================================================================

=== SET OPERATION MODE

==== Description

This command sets the operation mode that will be used by the dongle after the next power up

If the requested mode has been disabled on setup, an error will be returned.

WARNING: This function is not supported in this version

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   E0  |   26   |  00 |   00 | 01 | 00
|==============================================================================================================================

'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Operation Mode        
    
      0x01 : standard wallet

      0x02 : relaxed wallet

      0x04 : server 

      0x08 : developer

                                                            | 1
|==============================================================================================================================

'Output data'

None

'Availability'

This function is always available following dongle setup, and is protected by the user PIN.

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|================================================================================================

== Wallet usage APDUs

=== GET WALLET PUBLIC KEY

==== Description

This command returns the public key and Base58 encoded address for the given account and chain index

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   E0  |   40   |  01 : use the external chain

                    02 : use the internal chain |   00 | 08 | variable
|==============================================================================================================================

'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Account (big endian)                                                              | 4
| Chain index (big endian)                                                          | 4
|==============================================================================================================================

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Public Key length                                                                 | 1
| Uncompressed Public Key                                                           | var
| Base58 bitcoin address length                                                     | 1
| Base58 encoded bitcoin address                                                    | var
|==============================================================================================================================

'Availability'

This function is always available following dongle setup in standard wallet, relaxed wallet and server operation modes, and is protected by the user PIN.

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|================================================================================================

=== GET TRUSTED INPUT

==== Description

This command is used to extract a Trusted Input (encrypted transaction hash, output index, output amount) from a transaction. 

The transaction data to be provided should be encoded using bitcoin standard raw transaction encoding. Scripts can be sent over several APDUs. Other individual transaction elements split over different APDUs will be rejected. 64 bits varints are rejected.

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*        | *P2*       | *Lc*     | *Le*   
|   E0  |   42   |  00 : first transaction data block

                    80 : subsequent transaction data block       |  00        | var      | var   
|==============================================================================================================================

'Input data (first block)'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                                   | *Length*
| Input index to lookup                                                            | 4
| Transaction data                                                                 | var
|==============================================================================================================================

'Input data (next block)'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                                   | *Length*
| Transaction data                                                                                | var
|==============================================================================================================================

'Output data (non last block)'

None

'Output data (last block)'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                    | *Length*
| Trusted Input                                                                    | 56
|==============================================================================================================================

'Availability'

This function is always available following dongle setup in standard wallet, relaxed wallet and server operation modes.

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6A80   | Invalid data (parameters or transaction data)
|   6A82   | File not found
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|   9804   | Access condition not fulfilled
|================================================================================================


=== UNTRUSTED HASH TRANSACTION INPUT START

==== Description

This command is used to compose an opaque SHA-256 hash for a new transaction.

This transaction can be verified by the user and using transaction rules according to the current dongle operation mode.

If a new transaction is started, a VERIFY PIN command shall have been issued previously to unlock the dongle at least once following the dongle power up

The transaction data to be provided should be encoded using bitcoin standard raw transaction encoded as follows :

  - A 1 byte flag is added before each input in the transaction - if the input will be signed in the transaction (not part of a partial transaction), this flag is set to 0x01
  - Each input outpoint for an input that will be signed in the transaction is to be replaced by the Trusted Input length (1 byte) and the Trusted Input data
  - The input scripts shall be prepared by the host for the transaction signing process as per bitcoin rules : the current input script being signed shall be the previous output script, and other input script shall be null
  - The encoded transaction data shall be provided up to (and not including) the number of outputs.
  - Scripts can be sent over several APDUs. Other individual transaction elements split over different APDUs will be rejected. 64 bits varints are rejected.

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*        | *P2*       | *Lc*     | *Le*   
|   E0  |   44   |  00 : first transaction data block

                    80 : subsequent transaction data block         |  

                         00 : start signing a new transaction

                         80 : continue signing another input of the current transaction       | var      | var   
|==============================================================================================================================

'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                                   | *Length*
| Transaction data                                                                 | var
|==============================================================================================================================

'Output data'

None

'Availability'

This function is always available following dongle setup in standard wallet, relaxed wallet and server operation modes, and is protected by the user PIN when starting to sign a new transaction (P1 and P2 set to 0x00)

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6A80   | Invalid data (parameters or transaction data)
|   6A82   | File not found
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|   9804   | Access condition not fulfilled
|================================================================================================

=== UNTRUSTED HASH TRANSACTION INPUT FINALIZE

==== Description

This command is used to compose an opaque SHA-256 hash for the transaction outputs

This command is rejected if all inputs advertised at the beginning of the transaction have not been processed first.

The generated script will be the standard script coded as below given the address for a non script address

---------------------------------------------------------------------------------
OP_DUP OP_HASH160 [pubKeyHash] OP_EQUALVERIFY OP_CHECKSIG
---------------------------------------------------------------------------------

For a P2SH script address the generated script will be 

---------------------------------------------------------------------------------
OP_HASH160 [script hash] OP_EQUAL
---------------------------------------------------------------------------------

The output amount, fees and change will be validated by the user in wallet or relaxed wallet modes.

The generated transaction output data contains in pre-serialized form the number of outputs (target & optionally change) and each output data

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*        | *P2*       | *Lc*     | *Le*   
|   E0  |   46   | 
                    01 : output address provided as version byte + binary hash160

                    02 : output address provided as base58 string                                        
                               |   
                        00       |   var    | var   
|==============================================================================================================================


'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                       | *Length*
| Length of the Output Address                                                        | 1
| Output Address (base58, hash160 or Authorized Address)                              | var
| Amount (big endian)                                                                 | 8
| Fees (big endian)                                                                   | 8
| Account of the internal change address to use (big endian)                          | 4
| Chain index of the internal change address to use (big endian)                      | 4
|==============================================================================================================================


'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                   | *Length*
| Generated transaction output data length                                        | 1
| Generated transaction output data                                               | var
| Transaction user validation flag

      0x00 : no user validation requested

      0x01 : user validation requested
                                                                                  | 1
|==============================================================================================================================


'Availability'

This function is always available following dongle setup in standard wallet, relaxed wallet and server operation modes.

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6A80   | Invalid data (parameters, transaction state or rules not validated)
|   6A82   | File not found
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|   9804   | Access condition not fulfilled
|================================================================================================


=== UNTRUSTED HASH SIGN

==== Description

This command is used to sign a given secure hash using a private key (after re-hashing it following the standard Bitcoin signing process) to finalize a transaction input signing process.

This command will be rejected if the transaction signing state is not consistent or if a user validation is required and the provided user validation code is not correct.

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*        | *P2*       | *Lc*     | *Le*   
|   E0  |   48   |   00        |   00       |  var     |   var
|==============================================================================================================================


'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                      | *Length*
| Account of the private key to use (big endian)                                     | 4
| Chain index of the private key to use (big endian)                                 | 4
| Chain to use     

    0x01 : external chain 

    0x02 : internal chain

                                                                                     | 1
| User validation code length (or 0x00)                                              | 1
| User validation code                                                               | var
| Lock Time (big endian)                                                             | 4
| SigHashType                                                                        | 1
|==============================================================================================================================

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                   | *Length*
| Signed hash, as ASN-1 encoded R & S components                                  | var
| SigHashType                                                                     | 1
|==============================================================================================================================

'Availability'

This function is always available following dongle setup in standard wallet, relaxed wallet and server operation modes.

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6A82   | File not found
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|   9804   | Access condition not fulfilled
|================================================================================================

=== UNTRUSTED HASH TRANSACTION INPUT FINALIZE FULL

==== Description

This command is used to compose an opaque SHA-256 hash for the transaction outputs

This command is rejected if all inputs advertised at the beginning of the transaction have not been processed first.

WARNING: This function is not supported in this version

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*        | *P2*       | *Lc*     | *Le*   
|   E0  |   4A   |  00 |   00       |   var    | var   
|==============================================================================================================================


'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                       | *Length*
| Length of the Output data, including the number of outputs                                                                               | 2
| Output data                                                                         | var
|==============================================================================================================================


'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                   | *Length*
| Transaction user validation flag

      0x00 : no user validation requested

      0x01 : user validation requested
                                                                                  | 1
|==============================================================================================================================

'Availability'

This function is always available following dongle setup in relaxed wallet and server operation modes.

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6A80   | Invalid data (parameters, transaction state or rules not validated)
|   6A82   | File not found
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|   9804   | Access condition not fulfilled
|================================================================================================

=== SIGN MESSAGE

==== Description

This command is used to sign a maximum 140 bytes long text message using a private key. The message must be ASCII printable (each byte of the message must be between 0x1f and 0x7e)

The message is provided to the dongle, which types it along with a single usage transaction PIN when it's power cycled.

The transaction PIN is then sent back to this command to retrieve the message signature

The signature is performed using Bitcoin-Qt algorithm : 

  - The data to sign is the magic "Bitcoin Signed Message:\n" followed by the length of the message to sign on 1 byte followed by the binary content of the message
  - The signature is performed on a double SHA-256 hash of the data to sign

WARNING: This function is not supported in this version

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*        | *P2*       | *Lc*     | *Le*   
|   E0  |   4E   |  00 : prepare message

                    80 : sign message|   00       |   var    | var   
|==============================================================================================================================


'Input data in prepare mode'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                       | *Length*
| Account of the private key to use (big endian)                                     | 4
| Chain index of the private key to use (big endian)                                 | 4
| Chain to use     

    0x01 : external chain 

    0x02 : internal chain

                                                                                     | 1
| Message length (max 140)                                                           | 1
| Message                                                                            | var
|==============================================================================================================================


'Input data in sign mode'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                       | *Length*
| User validation code length                                                        | 1
| User validation code                                                               | var
|==============================================================================================================================


'Output data in prepare mode'

None

'Output data in sign mode'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                   | *Length*
| ASN-1 encoded message signature                                                 | variable
|==============================================================================================================================

'Availability'

This function is always available following dongle setup in standard wallet, relaxed wallet and server operation modes.

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6A80   | Invalid data (parameters, ASCII message not validated)
|   6A82   | File not found
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|   9804   | Access condition not fulfilled
|================================================================================================

=== GET INTERNAL CHAIN INDEX

==== Description

This command returns the current index used for the internal chain of all accounts.

This index starts at 0 and is incremented any time a change address is generated in a transaction.

WARNING: This function is not supported in this version

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   E0  |   4C   |  00 |   00 | 00 | 04
|==============================================================================================================================

'Input data'

None

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Chain index                                                                       | 4
|==============================================================================================================================

'Availability'

This function is always available following dongle setup in standard wallet, relaxed wallet and server operation modes.

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|================================================================================================

== Server mode APDUs

=== GET TRANSACTION LIMIT

==== Description

This command returns the current cumulative amount limit and the number of transactions remaining

WARNING: This function is not supported in this version

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   E0  |   A0   |  00 | 00 | 00 | 0C
|==============================================================================================================================

'Input data'

None

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Remaining cumulative amount (big endian)                                          | 8
| Remaining number of transactions                                                  | 4
|==============================================================================================================================

'Availability'

This function is always available following dongle setup in server operation modes.

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|================================================================================================

=== SET TRANSACTION LIMIT

==== Description

This command sets the current cumulative amount limit and the number of transactions remaining.

This command is protected by the HOTP server key. If the OTP is correct, the command is executed, the transaction limit is updated immediately and the OTP sequence counter is increased.

WARNING: This function is not supported in this version

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   E0  |   A2   |  00 | 00 | 10 | var
|==============================================================================================================================

'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| 8 digits HOTP code                                                                | 8
| Cumulative amount (big endian)                                                    | 8
| Number of transactions after power up                                             | 4
|==============================================================================================================================

'Output data'

None

'Availability'

This function is always available following dongle setup in server operation modes.

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|================================================================================================

== Developer mode APDUs

=== IMPORT PRIVATE KEY

==== Description

This command imports a regular private key, a BIP32 private key or a BIP32 seed and returns an encrypted version of the private key that this dongle can use for future operations.

WARNING: This function is not supported in this version

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   E0  |   B0   |  Import method 

                    0x01 : Base58 encoded private key or BIP32 private key

                    0x02 : BIP32 seed
 | 00 | var | var
|==============================================================================================================================

'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Base58 private key or seed                                                        | var
|==============================================================================================================================

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Encrypted private key                                                             | var
|==============================================================================================================================

'Availability'

This function is always available following dongle setup in developer operation mode.

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|================================================================================================

=== GET PUBLIC KEY

==== Description

This command returns the public key or the extended public key for an encrypted private key

WARNING: This function is not supported in this version

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   E0  |   B2   |  00 | 00 | var | var
|==============================================================================================================================

'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Encrypted private key length                                                      | 1
| Encrypted private key                                                             | var
|==============================================================================================================================

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Public key length                                                                 | 1
| Public key                                                                        | var
| Base58 Extended Public Key length (if available, or 0x00)                         | 1
| Base58 Extended Public Key                                                        | var
|==============================================================================================================================

'Availability'

This function is always available following dongle setup in developer operation mode, and is protected by the user PIN.

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|================================================================================================

=== DERIVE BIP32 KEY

==== Description

This command derives a BIP32 key to return a child key.

This command returns an error if operating on a non BIP32 key

WARNING: This function is not supported in this version

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   E0  |   B4   |  00 | 00 | var | var
|==============================================================================================================================

'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Encrypted private key length                                                      | 1
| Encrypted private key                                                             | var
| Child index (big endian)                                                          | 4
|==============================================================================================================================

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Encrypted private key                                                             | var
|==============================================================================================================================

'Availability'

This function is always available following dongle setup in developer operation mode.

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6A80   | Invalid data
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|================================================================================================

=== ECDSA SIGN/VERIFY IMMEDIATE

==== Description

This command is used to sign a given hash using an encrypted private key or verify a given signature using a public key

WARNING: This function is not supported in this version

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*        | *P2*       | *Lc*     | *Le*   
|   E0  |   B6   |   00 : sign

                     80 : verify        |   00 : sign with random K

                                            80 : sign with deterministic K, if enabled on setup     |  var     |   var
|==============================================================================================================================


'Input data (sign mode)'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                       | *Length*
| Length of encrypted private key                                                     | 1
| Encrypted private key                                                               | var
| Hash to sign                                                                        | var
|==============================================================================================================================

'Input data (verify mode)'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                   | *Length*
| Length of public key                                                            | 1
| Public key                                                                      | var
| Length of hash to verify (up to 32 bytes)                                       | 1
| Hash to verify                                                                  | var
| Signature                                                                       | var
|==============================================================================================================================


'Output data (sign mode)'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                  | *Length*
| Signed hash, as ASN-1 encoded R & S components                                 | var
|==============================================================================================================================

'Output data (verify mode)'

None

'Availability'

This function is always available following dongle setup in developer operation mode, and is protected by the user PIN

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (running in untrusted mode)
|   6A80   | Invalid data (invalid key encryption)
|   6A82   | File not found
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|   9804   | Access condition not fulfilled
|================================================================================================

== Test APDUs

=== GET RANDOM

==== Description

This command returns random bytes from the dongle hardware random number generator

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   E0  |   C0   |  00 | 00 | 00 | variable
|==============================================================================================================================

'Input data'

None

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Random bytes                                                                      | variable
|==============================================================================================================================

'Availability'

This function is always available.

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|================================================================================================

=== GET DEVICE ATTESTATION

==== Description

This command returns a signature of the given blob by the attestation key.

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   E0  |   C2   |  00 | 00 | 08 | variable
|==============================================================================================================================

'Input data'

None

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Attestation key batch ID                                                          | 04
| Attestation key derivation index ID                                               | 04
| Signature                                                                         | variable
|==============================================================================================================================

'Availability'

This function is always available.

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|================================================================================================

== Vendor management APDUs

These APDUs are used for factory setup and firmware updates.

=== FACTORY INITIALIZE KEYS

==== Description

This command is used to derive the factory update and attestation storage keys from the shared rom key before issuance.

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   D0  |   20   |  00 | 00 | 28 | 00
|==============================================================================================================================

'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Firmware update ID                                                                | 08
| Attestation storage key diversifier                                               | 10
| Firmware update key diversifier                                                   | 10
|==============================================================================================================================

'Output data'

None

'Availability'

This function is only available pre issuance

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|================================================================================================

=== FACTORY INITIALIZE ATTESTATION

==== Description

This command sets up the attestation private key used to authenticate the device.

The dongle switches to post-issuance mode once this APDU is received and handled successfully.

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   D0  |   22   |  00 | 00 | 2B | 00
|==============================================================================================================================

'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Attestation key batch ID                                                          | 04
| Attestation key derivation index ID                                               | 04
| Wrapped attestation private key                                                   | 23
|==============================================================================================================================

'Output data'

None

'Availability'

This function is only available pre issuance

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|================================================================================================

=== GET FIRMWARE UPDATE ID

==== Description

This command returns the firmware update ID of this dongle.

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   D0  |   24   |  00 | 00 | 00 | 08
|==============================================================================================================================

'Input data'

None

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Firmware update ID                                                                | 08
|==============================================================================================================================

'Availability'

This function is only available before the dongle is set up (either when received or following a dongle reset)

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|================================================================================================

=== FIRMWARE UPDATE

==== Description

This command is used to update the dongle firmware. 

The dongle must not been set up to issue this command - if the dongle is set up, first wipe the user data by issuing the wrong user PIN 3 times.

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*               | *P2*       | *Lc*     | *Le*   
|   D0  |   42   |   03 : start bootloader

                     06 : load bootloader
 |  00 |

                                          variable
                                               |   00

|==============================================================================================================================

'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Firmware blob                                                                     | variable
|==============================================================================================================================

'Output data'

None

'Availability'

This function is only available before the dongle is set up (either when received or following a dongle reset)

'Status Words'

[width="80%"]
|===============================================================================================
| *SW*     | *Description*
|   6581   | Memory problem
|   6700   | Incorrect length
|   6982   | Security status not satisfied (Bitcoin dongle is locked or invalid access rights)
|   6B00   | Incorrect parameter P1 or P2
|   6Fxx   | Technical problem (00 : no diagnostic given)
|   9000   | Normal ending of the command
|================================================================================================

== Data structures

The format of the data structures is provided for interoperability and validation purposes. A typical user will not need to manipulate them directly.

=== Encoded private key in developer mode

An encoded private key is stored internally as follow, Triple DES encrypted by the developer mode wrapping key

[width="80%"]
|==============================================================================================================================
| *Description*                                                                        | *Length*
| Magic version (*01*)                                                                 | 1
| Private key flags 

    0x01 : standard private key

    0x02 : BIP32 private key

    0x80 : testnet private key
                                                                                       | 1
| CRC-16 of the structure computed after setting current bytes to 0000                 | 2
| Nonce                                                                                | 3 or 4
| Private key component (S)                                                            | 32
| If BIP32, chain code                                                                 | 32
| If BIP32, depth                                                                      | 1
| If BIP32, child number                                                               | 4
| If BIP32, parent fingerprint                                                         | 4
|==============================================================================================================================

=== Encoded trusted input 

An encoded trusted input is stored internally as follow. The signature is the last block of a Triple DES CBC encryption of the previous data by the trusted input encryption key.

[width="80%"]
|==============================================================================================================================
| *Description*                                                                        | *Length*
| Magic version (*31*)                                                                 | 1
| Nonce                                                                                | 3
| Associated transaction hash                                                          | 32
| Index in associated transaction                                                      | 4
| Associated amount                                                                    | 8
| Signature                                                                            | 8
|==============================================================================================================================

=== Specific data transport for firmware update or private key attestation storage

Data sent for firmware update or private key attestation storage is formatted as follows, encrypted by either the diversified firmware update key or the diversified attestation storage key

[width="80%"]
|==============================================================================================================================
| *Description*                                                                     | *Length*
| Data size without padding                                                         | 01
| 3DES-CBC encrypted data with a null IV                                            | variable
| Padding                                                                           | variable
| CRC-16 of the cleartext data block                                                | 02
|==============================================================================================================================

The target key is disabled after 10 invalid CRC-16 have been received in sequence.

After each invalid CRC-16, the dongle has to be power cycled before accepting another command.
